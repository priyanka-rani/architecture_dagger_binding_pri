/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */



/**
* Shared file between builds so that they can all use the same dependencies and
* maven repositories.
**/
ext.deps = [:]
def versions = [:]
versions.arch_core = '2.1.0'
versions.room = '2.2.0'
versions.lifecycle = '2.2.0-beta01'
versions.appcompat = '1.1.0'
versions.support = '28.0.0'
versions.support_v4_legacy = '1.0.0'
versions.support_exif = '1.1.0-rc01'
versions.support_annotations = '1.1.0'
versions.material = '1.1.0-beta01'
versions.dagger = '2.24'
versions.junit = "4.12"
versions.espresso = '3.3.0-alpha02'
versions.retrofit = '2.6.2'
versions.okhttp_logging_interceptor = '4.2.2'
versions.mockwebserver = '4.2.2'
versions.apache_commons = "2.5"
versions.mockito = '3.1.0'
versions.mockito_all = "1.10.19"
versions.mockito_android = '3.1.0'
versions.dexmaker = "2.2.0"
versions.constraint_layout = '2.0.0-beta2'
versions.glide = '4.10.0'
versions.timber = '4.7.1'
versions.android_gradle_plugin = '3.5.1'
versions.atsl_runner = '1.3.0-alpha02'
versions.atsl_rules = "1.1.0-alpha4"
versions.hamcrest = "1.3"
versions.kotlin = "1.3.50"
versions.kotlin_coroutines = '1.3.2'
versions.kotlin_core_ktx = '2.1.0'
versions.paging_ktx = '2.1.0'
versions.navigation = '2.2.0-beta01'
versions.work = "2.2.0"
versions.event = "3.1.1"
versions.circleImageview = '3.0.1'
versions.picasso = "2.71828"
versions.google_services = "4.0.1"
versions.cropper = "2.8.0"
versions.firebase_core = '17.2.0'
versions.firebase_messaging = '20.0.0'
versions.firebase_ml_vision = '24.0.0'
versions.firebase_ml_vision_object_detection_model = '19.0.2'
versions.firebase_ml_vision_face_model = '19.0.0'
versions.robolectric = "3.8"
versions.play_services_base = '17.1.0'
versions.play_services_phone = '17.3.0'
versions.places = '2.0.0'
versions.supportLib = '28.0.0'
versions.yearclass = "2.1.0"
versions.play_core = '1.6.3'
def deps = [:]


def support = [:]
support.annotations = "androidx.annotation:annotation:$versions.support_annotations"
support.app_compat = "androidx.appcompat:appcompat:$versions.appcompat"
support.cardview = "androidx.cardview:cardview:$versions.support"
support.design = "com.google.android.material:material:$versions.material"
support.v4 = "androidx.legacy:legacy-support-v4:$versions.support_v4_legacy"
support.support_v4 = 'androidx.legacy:legacy-support-v4:1.0.0'
support.support_v13 = 'androidx.legacy:legacy-support-v13:1.0.0'
support.core_utils = "androidx.legacy:legacy-support-core-utils:$versions.support"
support.exifinterface = "androidx.exifinterface:exifinterface:$versions.support_exif"
deps.support = support

def room = [:]
room.runtime = "androidx.room:room-runtime:$versions.room"
room.compiler = "androidx.room:room-compiler:$versions.room"
room.rxjava2 = "androidx.room:room-rxjava2:$versions.room"
room.testing = "androidx.room:room-testing:$versions.room"
deps.room = room

def lifecycle = [:]
lifecycle.runtime = "androidx.lifecycle:lifecycle-runtime:$versions.lifecycle"
lifecycle.extensions = "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle"
lifecycle.java8 = "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
lifecycle.compiler = "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"
lifecycle.viewmodel_ktx = "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle"
deps.lifecycle = lifecycle

def arch_core = [:]
arch_core.testing = "androidx.arch.core:core-testing:$versions.arch_core"
deps.arch_core = arch_core


def play_services= [:]
play_services.base = "com.google.android.gms:play-services-base:$versions.play_services_base"
play_services.phone = "com.google.android.gms:play-services-auth-api-phone:$versions.play_services_phone"
deps.play_services = play_services

def retrofit = [:]
retrofit.runtime = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.mock = "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"
deps.retrofit = retrofit
deps.okhttp_logging_interceptor = "com.squareup.okhttp3:logging-interceptor:${versions.okhttp_logging_interceptor}"

def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android:$versions.dagger"
dagger.android_support = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:$versions.dagger"

deps.dagger = dagger

def espresso = [:]
espresso.core = "androidx.test.espresso:espresso-core:$versions.espresso"
espresso.contrib = "androidx.test.espresso:espresso-contrib:$versions.espresso"
espresso.intents = "androidx.test.espresso:espresso-intents:$versions.espresso"
deps.espresso = espresso

def atsl = [:]
atsl.runner = "androidx.test:runner:$versions.atsl_runner"
atsl.rules = "androidx.test:rules:$versions.atsl_runner"
deps.atsl = atsl

def mockito = [:]
mockito.core = "org.mockito:mockito-core:$versions.mockito"
mockito.all = "org.mockito:mockito-all:$versions.mockito_all"
mockito.android = "org.mockito:mockito-android:$versions.mockito_android"
deps.mockito = mockito

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
kotlin.plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
kotlin.allopen = "org.jetbrains.kotlin:kotlin-allopen:$versions.kotlin"
kotlin.reflect = "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin"
kotlin.coroutine = "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.kotlin_coroutines"
kotlin.core_ktx = "androidx.paging:paging-runtime-ktx:$versions.kotlin_core_ktx"
kotlin.paging_ktx = "androidx.paging:paging-runtime-ktx:$versions.paging_ktx"
deps.kotlin = kotlin

def glide = [:]
glide.runtime = "com.github.bumptech.glide:glide:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
deps.glide = glide

deps.dexmaker = "com.linkedin.dexmaker:dexmaker-mockito:$versions.dexmaker"
deps.constraint_layout = "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"
deps.timber = "com.jakewharton.timber:timber:$versions.timber"
deps.junit = "junit:junit:$versions.junit"
deps.mock_web_server = "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"
deps.hamcrest = "org.hamcrest:hamcrest-all:$versions.hamcrest"
deps.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"



deps.event = "org.greenrobot:eventbus:$versions.event"
deps.circleImageview = "de.hdodenhof:circleimageview:$versions.circleImageview"
deps.picasso = "com.squareup.picasso:picasso:$versions.picasso"
deps.google_services = "com.google.gms:google-services:$versions.google_services"
deps.cropper = "com.theartofdev.edmodo:android-image-cropper:$versions.cropper"
deps.robolectric = "org.robolectric:robolectric:$versions.robolectric"

deps.appcompat_v7 = 'androidx.appcompat:appcompat:1.0.0'
deps.yearclass = "com.facebook.device.yearclass:yearclass:$versions.yearclass"

deps.places = "com.google.android.libraries.places:places:$versions.places"

deps.play_core = "com.google.android.play:core:$versions.play_core"


ext.deps = deps

def build_versions = [:]
build_versions.min_sdk = 16
build_versions.target_sdk = 29
ext.build_versions = build_versions

def work = [:]
work.runtime = "androidx.work:work-runtime:$versions.work"
work.testing = "androidx.work:work-testing:$versions.work"
work.firebase = "androidx.work:work-firebase:$versions.work"
work.runtime_ktx = "androidx.work:work-runtime-ktx:$versions.work"
deps.work = work

def firebase = [:]
firebase.core = "com.google.firebase:firebase-core:$versions.firebase_core"
firebase.messaging = "com.google.firebase:firebase-messaging:$versions.firebase_messaging"
firebase.ml_vision = "com.google.firebase:firebase-ml-vision:$versions.firebase_ml_vision"
firebase.ml_vision_object_detection_model = "com.google.firebase:firebase-ml-vision-object-detection-model:$versions.firebase_ml_vision_object_detection_model"
firebase.ml_vision_face_model = "com.google.firebase:firebase-ml-vision-face-model:$versions.firebase_ml_vision_face_model"
deps.firebase = firebase

def navigation = [:]
navigation.runtime = "androidx.navigation:navigation-runtime:$versions.navigation"
navigation.runtime_ktx = "androidx.navigation:navigation-runtime-ktx:$versions.navigation"
navigation.navigation_ui = "androidx.navigation:navigation-ui-ktx:$versions.navigation"
navigation.fragment = "androidx.navigation:navigation-fragment:$versions.navigation"
navigation.fragment_ktx = "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
navigation.safe_args_plugin = "androidx.navigation:navigation-safe-args-gradle-plugin:$versions.navigation"
deps.navigation = navigation

ext.deps = deps

def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    // Add repository
    handler.jcenter{ url "http://jcenter.bintray.com/" }
    handler. maven { url 'https://maven.fabric.io/public' }
}
ext.addRepos = this.&addRepos
